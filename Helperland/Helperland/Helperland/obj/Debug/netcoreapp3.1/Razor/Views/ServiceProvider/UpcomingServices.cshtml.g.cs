#pragma checksum "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\ServiceProvider\UpcomingServices.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7486c7b17d9a78eefecee630994211ea6eb55c69"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ServiceProvider_UpcomingServices), @"mvc.1.0.view", @"/Views/ServiceProvider/UpcomingServices.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\_ViewImports.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland.Enums;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7486c7b17d9a78eefecee630994211ea6eb55c69", @"/Views/ServiceProvider/UpcomingServices.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1b4b1c47201b9aa2787e6cec5b59d0d5213a1108", @"/Views/_ViewImports.cshtml")]
    public class Views_ServiceProvider_UpcomingServices : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\ServiceProvider\UpcomingServices.cshtml"
  
    Layout = "~/Views/Shared/UserLayout.cshtml";
    ViewData["Title"] = "Upcoming Services";
    var user = Context.Session.GetString("User");
    SessionUser sessionUser = new SessionUser();

    if (user != null)
    {
        sessionUser = JsonConvert.DeserializeObject<SessionUser>(user);
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n<div class=\"customer-table  newservicerequest\">\r\n   \r\n    <input type=\"hidden\" id=\"hiddenuserid\"");
            BeginWriteAttribute("value", " value=\"", 416, "\"", 443, 1);
#nullable restore
#line 16 "F:\PSD TO HTML\website\Helperland\Helperland\Helperland\Views\ServiceProvider\UpcomingServices.cshtml"
WriteAttributeValue("", 424, sessionUser.UserID, 424, 19, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\r\n    <input type=\"hidden\" id=\"hiddenServiceRequestId\"");
            BeginWriteAttribute("value", " value=\"", 501, "\"", 509, 0);
            EndWriteAttribute();
            WriteLiteral(" />\r\n    <input type=\"hidden\" id=\"hiddenserviceproviderid\"");
            BeginWriteAttribute("value", " value=\"", 568, "\"", 576, 0);
            EndWriteAttribute();
            WriteLiteral(" />\r\n    <table id=\"example\" class=\"display customer-table history-table\" style=\"width:100%\">\r\n        <thead>\r\n            <tr>\r\n                <th>Service ID <img");
            BeginWriteAttribute("alt", " alt=\"", 742, "\"", 748, 0);
            EndWriteAttribute();
            WriteLiteral(" class=\"sorting-img\"></th>\r\n                <th>Service data <img");
            BeginWriteAttribute("alt", " alt=\"", 814, "\"", 820, 0);
            EndWriteAttribute();
            WriteLiteral(" class=\"sorting-img\"></th>\r\n                <th class=\"cus-dait\">Customer details <img");
            BeginWriteAttribute("alt", " alt=\"", 907, "\"", 913, 0);
            EndWriteAttribute();
            WriteLiteral(" class=\"sorting-img\"></th>\r\n                <th>Payment <img");
            BeginWriteAttribute("alt", " alt=\"", 974, "\"", 980, 0);
            EndWriteAttribute();
            WriteLiteral(" class=\"sorting-img\"></th>\r\n                <th>Distance  <img");
            BeginWriteAttribute("alt", " alt=\"", 1043, "\"", 1049, 0);
            EndWriteAttribute();
            WriteLiteral(" class=\"sorting-img\"></th>\r\n");
            WriteLiteral("                <th class=\"action\">Action <img");
            BeginWriteAttribute("alt", " alt=\"", 1201, "\"", 1207, 0);
            EndWriteAttribute();
            WriteLiteral(" class=\"sorting-img\"></th>\r\n\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n        </tbody>\r\n\r\n    </table>\r\n</div>\r\n\r\n\r\n");
            DefineSection("UserLayoutSection", async() => {
                WriteLiteral(@"
    <script>
        $(document).ready(function () {
            $('#example').DataTable({
                ""dom"": '<""top""i>rt<""bottom""flp><""clear"">',
                ""columnDefs"": [
                    { ""orderable"": false, ""targets"": 4 }
                ],

                ""bFilter"": false, //hide Search bar
                ""pagingType"": ""full_numbers"",
                paging: true,
                ""pagingType"": ""full_numbers"",
                // bFilter: false,
                ordering: true,
                searching: false,
                info: true,
                ""columnDefs"": [
                    { ""orderable"": false, ""targets"": 5 }
                ],
                ""oLanguage"": {
                    ""sInfo"": ""Total Records: _TOTAL_""
                },
                ""dom"": 'Bt<""top"">rt<""bottom""lip><""clear"">',
                responsive: true,
                ""order"": [],
                buttons: {
                    dom: {
                        button: {
         ");
                WriteLiteral(@"                   tag: 'button',
                            className: ''
                        }
                    },
                    buttons: [{
                        extend: 'excel',
                        text: 'Export',
                        className: ""Export"",
                        exportOptions: {
                            columns: [0, 1, 2, 3]
                        },
                    }]
                }
            });
        });

        $(document).ready(function () {
            UpcomingService();
        });
        function UpcomingService() {

            $.ajax({
                url: '/serviceprovider/upcomingservice',
                type: 'post',
                success: function (respo) {
                    console.log(respo);
                    respo.forEach(function (element) {
                        var t = $('#example').DataTable();
                        date = new Date(element.servicestartdate);
                      
      ");
                WriteLiteral(@"                  var d2 = new Date(element.servicestartdate);
                        d2.setMinutes(d2.getMinutes() + (element.servicehoures * 60));
                        var temptime = AppendZero(date.getHours().toString()) + "":"" + AppendZero(date.getMinutes().toString()) + "" - "" + AppendZero(d2.getHours().toString()) + "":"" + AppendZero(d2.getMinutes().toString())
                        var inputtagdate = AppendZero(date.getDate().toString()) + ""-"" + AppendZero((date.getMonth() + 1).toString()) + ""-"" + date.getFullYear().toString();

                        t.row.add([
                            '<span class=""tdclick""> <a onclick=""showservicerequestdetailmodel(' + element.serviceid + ',2)"" class=""startid d-flex justify-content-center align-items-center"" href=""#""> ' + element.serviceid + '</a></span>',
                            '<img src=""..//img/service-provider-upcoming-service/calendar2.png"" alt=""""><span class=""bold"">' + inputtagdate + '</span> <br><img src=""..//img/service-provider-upcoming-");
                WriteLiteral(@"service/layer-712.png"" alt="""">' + temptime,
                            element.customeruser.firstName + element.customeruser.lastName + '<br><img src = ""..//img/service-provider-upcoming-service/layer-15.png"" alt = """"> ' + element.serviceaddressstrretname + ' ' + element.serviceaddresshousenumber + ' <br> ' + element.servicereqestpostalcode + ' ' + element.servicereqestcity,
                            '<span class=""price""> ' + element.payment + 'â‚¬' + '</span>',
                            '',
                            '<button id=""completed' + element.serviceid + '"" class=""btn btn-Accept btn-rounded-17 me-1"" onclick=""Completed(' + element.serviceid + ')"" value=""Completed"">Completed</button><button class=""btn btn-danger btn-rounded-17"" onclick=""Cancel(' + element.serviceid + ')"" value=""Cancel"">Cancel</button>'
                        ]).draw(false);
                        console.log();
                        var date1 = d2;
                        var date2 = new Date();

                     ");
                WriteLiteral(@"   if (date1.getTime() > date2.getTime()) {
                           

                            $(""#completed"" + element.serviceid).addClass("" d-none"");
                        }
                        else {

                            $(""#completed"" + element.serviceid).removeClass("" d-none"");
                        }
                    });
                }
            });
        }
        function AppendZero(input) {
            if (input.length == 1) {
                return '0' + input;
            }
            return input;
        }
        function Completed(serviceid) {
            $.ajax({
                url: '/serviceprovider/Completed',
                type: 'post',
                data: { 'serviceid': serviceid },
                success: function (respo) {
                    console.log(respo);
                    location.reload();
                }
            });
        }
        function Cancel(serviceid) {

            $.ajax({
               ");
                WriteLiteral(@" url: '/serviceprovider/Cancel',
                type: 'post',
                data: { 'serviceid': serviceid },
                success: function (respo) {
                    console.log(respo);
                    location.reload();
                }
            });
        }
        function showservicerequestdetailmodel(id, index) {
            $(""#trserviceprovidermodel"").modal(""show"");
            $(""#hiddenServiceRequestId"").val(id);
            console.log($(""#hiddenServiceRequestId"").val(id));

            $.ajax({
                type: 'Post',
                url: '/ServiceProvider/dispaydataformtheserviceid',
                data: { ""servicerequestid"": id },
                success: function (respo) {
                    console.log(respo);
                  
                    document.getElementById(""serviceproviderd&t"").innerHTML = respo.user.serviceStartDate;
                    document.getElementById(""serviceproviderduration"").innerHTML = respo.user.serviceHours;
    ");
                WriteLiteral(@"                document.getElementById(""serviceprovidersrid"").innerHTML = respo.user.serviceRequestId;
                    document.getElementById(""serviceproviderextra"").innerHTML = respo.serviceRequestExtraName;
                    document.getElementById(""serviceproviderprice"").innerHTML = respo.user.totalCost;
                    document.getElementById(""customername"").innerHTML = respo.user.user.firstName + "" "" + respo.user.user.lastName;
                    document.getElementById(""serviceproviderserviceaddress"").innerHTML = respo.user.serviceRequestAddresses[0].addressLine1 +
                        respo.user.serviceRequestAddresses[0].addressLine2 + '<br>' +
                        respo.user.serviceRequestAddresses[0].postalCode +
                        respo.user.serviceRequestAddresses[0].city;
                    document.getElementById(""serviceproviderphonenumber"").innerHTML = respo.user.serviceRequestAddresses[0].mobile;
                    document.getElementById(""serviceproviderema");
                WriteLiteral(@"il"").innerHTML = respo.user.serviceRequestAddresses[0].email;
                    document.getElementById(""serviceprovidercomments"").innerHTML = respo.user.comments;
                    $(""#btnaccept"").html('<button id=""srcompleted' + respo.user.serviceRequestId + '"" class=""btn btn-Accept btn-rounded-17 me-1 d-flex align-items-center p-2"" onclick=""Completed(' + respo.user.serviceRequestId + ')"" value=""Completed""><img src=""..//img/service-provider/right.png"" />Completed</button><button class=""btn btn-danger btn-rounded-17 d-flex align-items-center"" onclick=""Cancel(' + respo.user.serviceRequestId + ')"" value=""Cancel""><img src=""..//img/service-provider/cancwel.png"" />Cancel</button>');

                    var d2 = new Date(respo.user.serviceStartDate);
                    var date1 = d2;
                    var date2 = new Date();

                    if (date1.getTime() > date2.getTime()) {
                       

                        $(""#srcompleted"" + respo.user.serviceRequestId).addClass("" d-");
                WriteLiteral(@"none"");
                    }
                    else {

                        $(""#srcompleted"" + respo.user.serviceRequestId).removeClass("" d-none"");
                    }
                        var inputDate = respo.user.serviceStartDate;
                    const date = new Date(inputDate);
                    var inputTagDate = date.getFullYear().toString() + ""-"" + AppendZero((date.getMonth() + 1).toString()) + ""-"" + AppendZero(date.getDate().toString());

                    console.log(inputTagDate);

                    $(""#datechange"").val(inputTagDate);
                   
                },
                error: function (respo) {
                    alert('error:' + respo.responseText);
                }
            });

        }
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
